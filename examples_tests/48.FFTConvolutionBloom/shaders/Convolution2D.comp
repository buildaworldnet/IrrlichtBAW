#version 430 core

#include "Convolution2DConfig.h"

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout (set = 0, binding = 0, INPUT_IMAGE_FORMAT1) uniform image2D inputReal;
layout (set = 1, binding = 0, INPUT_IMAGE_FORMAT2) uniform image2D inputImag;
layout (set = 2, binding = 0, OUTPUT_IMAGE_FORMAT1) uniform readonly image2D kernelReal;
layout (set = 3, binding = 0, OUTPUT_IMAGE_FORMAT2) uniform readonly image2D kernelImag;

layout(push_constant) uniform conv_info {
	ivec2 original_res;
	ivec2 kernel_res;
} conv;

vec2 cplx_mul(vec2 lhs, vec2 rhs) 
{
    return vec2(lhs.x * rhs.x - lhs.y * rhs.y, lhs.y * rhs.x + lhs.x * rhs.y);
}

void main()
{
    ivec2 idx = ivec2(gl_GlobalInvocationID.xy);
    ivec2 kern_idx = idx - (conv.original_res - conv.kernel_res);

    vec4 in_real = imageLoad(inputReal, idx);
    vec4 in_imag = imageLoad(inputImag, idx);

    vec4 kernel_real = imageLoad(kernelReal, idx);
    vec4 kernel_imag = imageLoad(kernelImag, idx); 

    for(int i = 0; i < 4; i++)
    {
        vec2 result = cplx_mul(vec2(in_real[i], in_imag[i]), vec2(kernel_real[i], kernel_imag[i]));

        in_real[i] = result.x;
        in_imag[i] = result.y;
    }

    imageStore(inputReal, idx, in_real);
    imageStore(inputImag, idx, in_imag);

}
